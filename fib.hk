// Function syntax
def fib N start
    // Need parens below.
    if (N == 0) or (N == 1) then
        output = 1
        // Output is reserved word; it's the return value of the function.
    else
        prev = N - 1
        prevPrev = N - 2
        // Function calls must be on separate lines
        prevVal = call fib prev end
        prevPrevVal = call fib prevPrev end
        output = prevVal + prevPrevVal
    end
end

N = 10
counter = 0
temp = 0
prev = 1
prevPrev = 1
while (counter < N) or (counter == N) do
    if counter < 2 then
        skip
    else
        temp = prev + prevPrev
        prevPrev = prev
        prev = temp
    end
    counter = counter + 1
end

output1 = call fib N end
output2 = prev

output = output1


// Code that tests function memoisation
def addOne N start
    output = N + 1
end

def testIf start
    if 1 == 2 then
        output = 1
    else
        output = true
    end
    invalid = output
end

output = call addOne 1 end
res2 = call addOne 3 end
res3 = call addOne 5 end


// Testing function separation, conversion to AST,
// and soft typing without recursion.
def integerFunc primArg emptyArg start
    arg2 = primArg + primArg
    arg3 = 3
    output = arg3
end

def negation arg1 arg2 start
    arg2 = -arg1
    output = arg2
end

def boolean arg1 arg2 start
    arg3 = arg1 == arg2
    output = arg1
end